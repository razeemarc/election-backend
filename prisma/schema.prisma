generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql/sqlite depending on use
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}
model Member {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  isBlocked   Boolean   @default(false)
  votes     Vote[]     
  candidacies Candidate[]

  @@map("members")
  Election Election[]
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Candidate {
  id                   String    @id @default(uuid())
  memberId             String
  electionId           String
  appliedAt            DateTime  @default(now())
  proposedElectionDate DateTime
  status               Status    @default(PENDING)

  member      Member    @relation(fields: [memberId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])
  Vote        Vote[]

  @@unique([memberId, electionId])
  @@map("candidates")
}


model Election {
  id          String      @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdBy   String
  admin       Member      @relation(fields: [createdBy], references: [id])
  candidates  Candidate[]
  votes       Vote[]
  createdAt   DateTime    @default(now())

  @@map("elections")
}


model Vote {
  id          String    @id @default(uuid())
  memberId    String
  electionId  String
  candidateId String
  votedAt     DateTime  @default(now())

  member      Member    @relation(fields: [memberId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@unique([memberId, electionId]) // one vote per election
  @@map("votes")
}
